# Devcmd Development Commands - Modular Architecture
# Multi-module project with clean separation of concerns and dependency hierarchy

# =============================================================================
# PROJECT CONFIGURATION
# =============================================================================

var PROJECT = "devcmd"
var VERSION = "$(git describe --tags --always --dirty 2>/dev/null || echo 'dev')"
var BUILD_TIME = "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
var GO_VERSION = "1.24.3"

# =============================================================================
# 📦 CORE MODULE - Foundation (no dependencies)
# =============================================================================

# Core module testing
core-test: @workdir("core") { 
    echo "🧪 Testing core module..."
    go test -v ./... 
}

core-test-coverage: @workdir("core") { 
    echo "📊 Testing core module with coverage..."
    go test -race -coverprofile=../coverage-core.out -covermode=atomic ./... 
}

# Core module code quality
core-lint: @workdir("core") { 
    echo "🔍 Linting core module..."
    command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=3m || go vet ./...
}

core-format: @workdir("core") { 
    echo "📝 Formatting core module..."
    command -v gofumpt >/dev/null 2>&1 && gofumpt -w . || go fmt ./...
}

# Core module utilities
core-clean: @workdir("core") { 
    echo "🧹 Cleaning core module..."
    go clean -cache -testcache
}

core-deps: @workdir("core") { 
    echo "📦 Managing core module dependencies..."
    go mod download
    go mod tidy
}

# Complete core module CI workflow
core-ci: {
    echo "🧪 Core module CI workflow..."
    @cmd(core-format)
    @cmd(core-lint)
    @cmd(core-test-coverage)
    echo "✅ Core module CI complete!"
}

# =============================================================================
# ⚡ RUNTIME MODULE - Decorators & Execution (depends on core)
# =============================================================================

# Runtime module testing
runtime-test: @workdir("runtime") { 
    echo "⚡ Testing runtime module..."
    go test -v ./... 
}

runtime-test-coverage: @workdir("runtime") { 
    echo "📊 Testing runtime module with coverage..."
    go test -race -coverprofile=../coverage-runtime.out -covermode=atomic ./... 
}

# Runtime module code quality
runtime-lint: @workdir("runtime") { 
    echo "🔍 Linting runtime module..."
    command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=3m || go vet ./...
}

runtime-format: @workdir("runtime") { 
    echo "📝 Formatting runtime module..."
    command -v gofumpt >/dev/null 2>&1 && gofumpt -w . || go fmt ./...
}

# Runtime module utilities
runtime-clean: @workdir("runtime") { 
    echo "🧹 Cleaning runtime module..."
    go clean -cache -testcache
}

runtime-deps: @workdir("runtime") { 
    echo "📦 Managing runtime module dependencies..."
    go mod download
    go mod tidy
}

# Complete runtime module CI workflow (includes dependency validation)
runtime-ci: {
    echo "⚡ Runtime module CI workflow..."
    @cmd(core-test)          # Ensure dependency is good
    @cmd(runtime-format)
    @cmd(runtime-lint)
    @cmd(runtime-test-coverage)
    echo "✅ Runtime module CI complete!"
}

# =============================================================================
# 🧰 TESTING MODULE - Test Utilities (depends on core + runtime)
# =============================================================================

# Testing module testing
testing-test: @workdir("testing") { 
    echo "🧰 Testing testing module..."
    go test -v ./... 
}

testing-test-coverage: @workdir("testing") { 
    echo "📊 Testing testing module with coverage..."
    go test -race -coverprofile=../coverage-testing.out -covermode=atomic ./... 
}

# Testing module code quality
testing-lint: @workdir("testing") { 
    echo "🔍 Linting testing module..."
    command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=3m || go vet ./...
}

testing-format: @workdir("testing") { 
    echo "📝 Formatting testing module..."
    command -v gofumpt >/dev/null 2>&1 && gofumpt -w . || go fmt ./...
}

# Testing module utilities
testing-clean: @workdir("testing") { 
    echo "🧹 Cleaning testing module..."
    go clean -cache -testcache
}

testing-deps: @workdir("testing") { 
    echo "📦 Managing testing module dependencies..."
    go mod download
    go mod tidy
}

# Complete testing module CI workflow (includes dependency validation)
testing-ci: {
    echo "🧰 Testing module CI workflow..."
    @cmd(core-test)          # Ensure dependencies are good
    @cmd(runtime-test)
    @cmd(testing-format)
    @cmd(testing-lint)
    @cmd(testing-test-coverage)
    echo "✅ Testing module CI complete!"
}

# =============================================================================
# 🚀 CLI MODULE - Main Application (depends on all modules)
# =============================================================================

# CLI module testing
cli-test: @workdir("cli") { 
    echo "🚀 Testing CLI module..."
    go test -v ./... 
}

cli-test-coverage: @workdir("cli") { 
    echo "📊 Testing CLI module with coverage..."
    go test -race -coverprofile=../coverage-cli.out -covermode=atomic ./... 
}

# CLI module code quality
cli-lint: @workdir("cli") { 
    echo "🔍 Linting CLI module..."
    command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=3m || go vet ./...
}

cli-format: @workdir("cli") { 
    echo "📝 Formatting CLI module..."
    command -v gofumpt >/dev/null 2>&1 && gofumpt -w . || go fmt ./...
}

# CLI module utilities
cli-clean: @workdir("cli") { 
    echo "🧹 Cleaning CLI module..."
    go clean -cache -testcache
}

cli-deps: @workdir("cli") { 
    echo "📦 Managing CLI module dependencies..."
    go mod download
    go mod tidy
}

# Component-specific CLI tests
cli-test-lexer: @workdir("cli") { go test -v ./internal/lexer }
cli-test-parser: @workdir("cli") { go test -v ./internal/parser }
cli-test-engine: @workdir("cli") { go test -v ./internal/engine }

# Complete CLI module CI workflow (includes all dependency validation)
cli-ci: {
    echo "🚀 CLI module CI workflow..."
    @cmd(core-test)          # Ensure all dependencies are good
    @cmd(runtime-test)
    @cmd(testing-test)
    @cmd(cli-format)
    @cmd(cli-lint)
    @cmd(cli-test-coverage)
    echo "✅ CLI module CI complete!"
}

# =============================================================================
# 🔄 GLOBAL ORCHESTRATION - Project-wide Commands
# =============================================================================

# Quick setup for new contributors
setup: {
    echo "🔧 Setting up @var(PROJECT) development environment..."
    echo "📦 Downloading Go dependencies for all modules..."
    @parallel {
        @cmd(core-deps)
        @cmd(runtime-deps)
        @cmd(testing-deps)
        @cmd(cli-deps)
    }
    go work sync
    echo "✅ Setup complete! Run 'dev ci' to verify everything works."
}

# Test all modules respecting dependency hierarchy
test: {
    echo "🧪 Testing all modules with dependency awareness..."
    @cmd(core-test)           # Foundation
    @cmd(runtime-test)        # Depends on core
    @cmd(testing-test)        # Depends on core + runtime  
    @cmd(cli-test)            # Depends on all
    echo "✅ All module tests passed!"
}

# Test all modules with coverage
test-coverage: {
    echo "📊 Running tests with coverage across all modules..."
    @cmd(core-test-coverage)
    @cmd(runtime-test-coverage)
    @cmd(testing-test-coverage)
    @cmd(cli-test-coverage)
    @cmd(coverage-reports)
    echo "✅ Coverage testing complete!"
}

# Generate coverage reports (only called after coverage tests)
coverage-reports: {
    echo "📊 Merging coverage reports..."
    command -v gocovmerge >/dev/null 2>&1 && gocovmerge coverage-*.out > coverage.out && rm coverage-*.out || echo "⚠️  gocovmerge not available"
    command -v go >/dev/null 2>&1 && go tool cover -html=coverage.out -o coverage.html && echo "📊 Coverage report: coverage.html"
}

# Format all modules
format: {
    echo "📝 Formatting all code across modules..."
    @parallel {
        @cmd(core-format)
        @cmd(runtime-format)
        @cmd(testing-format)
        @cmd(cli-format)
    }
    # Also format Nix files
    command -v nixpkgs-fmt >/dev/null 2>&1 && find . -name '*.nix' -exec nixpkgs-fmt {} + || echo "⚠️  nixpkgs-fmt not available"
    echo "✅ All code formatted!"
}

# Lint all modules
lint: {
    echo "🔍 Running linters across all modules..."
    @parallel {
        @cmd(core-lint)
        @cmd(runtime-lint)
        @cmd(testing-lint)
        @cmd(cli-lint)
    }
    echo "✅ Linting complete!"
}

# Clean all modules
clean: {
    echo "🧹 Cleaning generated files and artifacts..."
    @parallel {
        @cmd(core-clean)
        @cmd(runtime-clean)
        @cmd(testing-clean)
        @cmd(cli-clean)
    }
    rm -f @var(PROJECT) coverage-core.out coverage-runtime.out coverage-testing.out coverage-cli.out coverage.out coverage.html
    rm -rf result result-* build/ artifacts/
    echo "✅ Cleanup complete"
}

# Build the CLI (with full validation)
build: {
    echo "🔨 Building @var(PROJECT) CLI..."
    echo "🧪 Running full CI to ensure quality..."
    @cmd(ci)
    echo "🔨 Building binary..."
    @workdir("cli") { go build -ldflags="-s -w -X main.Version=@var(VERSION) -X main.BuildTime=@var(BUILD_TIME)" -o ../@var(PROJECT) ./main.go }
    echo "✅ Built: ./@var(PROJECT)"
}

# Full CI workflow
ci: {
    echo "🔄 Full project CI workflow..."
    @cmd(core-ci)
    @cmd(runtime-ci)
    @cmd(testing-ci)
    @cmd(cli-ci)
    echo "🎉 Full project CI complete!"
}

# Quick development iteration
dev-quick: {
    echo "⚡ Quick development checks..."
    @cmd(format)
    @cmd(test)
    echo "✅ Quick checks passed!"
}

# =============================================================================
# 📦 NIX INTEGRATION  
# =============================================================================

# Build with Nix
nix-build: {
    echo "📦 Building with Nix..."
    nix build .#@var(PROJECT) --print-build-logs
    echo "✅ Nix build complete"
}

# Comprehensive Nix validation
nix-check: {
    echo "🔍 Running comprehensive Nix validation..."
    nix flake check --print-build-logs
    echo "✅ Nix validation passed"
}

# Test all example CLIs
test-examples: {
    echo "🎯 Testing example CLIs..."
    @parallel {
        nix build .#basicDev --print-build-logs
        nix build .#webDev --print-build-logs
        nix build .#goProject --print-build-logs
    }
    echo "Testing example functionality..."
    @parallel {
        nix run .#basicDev -- --help >/dev/null
        nix run .#webDev -- --help >/dev/null
        nix run .#goProject -- --help >/dev/null
    }
    echo "✅ Example CLI tests passed!"
}

# Release preparation with comprehensive testing
release: @timeout(10m) {
    echo "📦 Running release preparation workflow..."
    @cmd(clean)
    @cmd(setup)
    @cmd(ci)
    @cmd(test-examples)
    @cmd(format)
    echo "📋 Release checklist complete!"
    echo "🚀 Ready for release!"
}

# =============================================================================
# 📊 PROJECT STATUS & UTILITIES
# =============================================================================

# Show detailed project information
info: {
    echo "📊 @var(PROJECT) Multi-Module Project Status"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Project: @var(PROJECT)"
    echo "Version: @var(VERSION)"
    echo "Build time: @var(BUILD_TIME)"
    echo "Go version: @var(GO_VERSION)"
    echo ""
    echo "Module Dependency Hierarchy:"
    echo "  core/     - Foundation (AST, types, errors)"
    echo "  ├── runtime/  - Decorators and execution contexts"
    echo "  ├── testing/  - Test utilities and frameworks"
    echo "  └── cli/      - Main CLI application"
    echo ""
    echo "Statistics:"
    echo "  Go source files: $(find . -name '*.go' | wc -l)"
    echo "  Test files: $(find . -name '*_test.go' | wc -l)"
    echo "  Modules: $(find . -name 'go.mod' | wc -l)"
    echo ""
    echo "Git status:"
    git status --porcelain | head -5 || echo "Not a git repository"
}

# Quick alias for info
status: @cmd(info)

# =============================================================================
# 📋 HELP & DOCUMENTATION
# =============================================================================

# Show comprehensive help
help: {
    echo "🔧 Devcmd Multi-Module Development Commands"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "🚀 Global Commands:"
    echo "  setup          - Set up development environment"
    echo "  build          - Build CLI (with full validation)"
    echo "  ci             - Full project CI workflow"
    echo "  test           - Test all modules (dependency order)"
    echo "  test-coverage  - Tests with coverage reports"
    echo "  format         - Format all code"
    echo "  lint           - Run all linters"
    echo "  clean          - Clean artifacts and caches"
    echo ""
    echo "📦 Module-Specific Commands:"
    echo "  core-ci        - Complete core module workflow"
    echo "  runtime-ci     - Complete runtime module workflow"
    echo "  testing-ci     - Complete testing module workflow"
    echo "  cli-ci         - Complete CLI module workflow"
    echo ""
    echo "🧪 Module Testing:"
    echo "  [module]-test           - Test specific module"
    echo "  [module]-test-coverage  - Test with coverage"
    echo "  [module]-lint           - Lint specific module"
    echo "  [module]-format         - Format specific module"
    echo ""
    echo "📦 Nix Integration:"
    echo "  nix-build      - Build with Nix"
    echo "  nix-check      - Comprehensive Nix validation"
    echo "  test-examples  - Test example CLIs"
    echo ""
    echo "🔄 Workflows:"
    echo "  dev-quick      - Fast development iteration"
    echo "  release        - Release preparation"
    echo ""
    echo "📊 Utilities:"
    echo "  info           - Show project status"
    echo "  status         - Show project status (alias)"
    echo "  help           - Show this help"
    echo ""
    echo "Module hierarchy: core → runtime → testing → cli"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}