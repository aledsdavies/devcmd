# Devcmd Development Commands
# Multi-module project with clean separation of concerns

# =============================================================================
# PROJECT CONFIGURATION
# =============================================================================

var PROJECT = "devcmd"
var VERSION = "$(git describe --tags --always --dirty 2>/dev/null || echo 'dev')"
var BUILD_TIME = "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
var GO_VERSION = "1.24.3"

# =============================================================================
# 🚀 CORE DEVELOPMENT COMMANDS
# =============================================================================

# Build the CLI from multi-module structure
build: {
    echo "🔨 Building @var(PROJECT) CLI..."
    cd cli && go build -ldflags="-s -w -X main.Version=@var(VERSION) -X main.BuildTime=@var(BUILD_TIME)" -o ../@var(PROJECT) ./main.go
    echo "✅ Built: ./@var(PROJECT)"
}

# Quick setup for new contributors
setup: {
    echo "🔧 Setting up @var(PROJECT) development environment..."
    echo "📦 Downloading Go dependencies for all modules..."
    @parallel {
        @workdir("core") { go mod download }
        @workdir("runtime") { go mod download }
        @workdir("testing") { go mod download }
        @workdir("cli") { go mod download }
    }
    echo "Setup complete! Run dev test to verify."
}

# =============================================================================
# 🧪 TESTING COMMANDS
# =============================================================================

# Fast checks for quick feedback
test-quick: {
    echo "⚡ Running quick checks..."
    echo "🔍 Checking Go formatting..."
    command -v gofumpt >/dev/null 2>&1 && gofumpt -l . | head -20 || go fmt ./... >/dev/null
    echo "🔍 Running basic linters..."
    command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --fast || echo "⚠️  golangci-lint not available"
    echo "✅ Quick checks passed!"
}

# Comprehensive testing across all modules
test: {
    echo "🧪 Running tests across all modules..."
    @parallel {
        @workdir("core") { go test ./... }
        @workdir("runtime") { go test ./... }
        @workdir("testing") { go test ./... }
        @workdir("cli") { go test ./... }
    }
    echo "✅ All module tests passed!"
}

# Testing with coverage reports
test-coverage: {
    echo "📊 Running tests with coverage across all modules..."
    @parallel {
        cd core && go test -race -coverprofile=../coverage-core.out -covermode=atomic ./...
        cd runtime && go test -race -coverprofile=../coverage-runtime.out -covermode=atomic ./...
        cd testing && go test -race -coverprofile=../coverage-testing.out -covermode=atomic ./...
        cd cli && go test -race -coverprofile=../coverage-cli.out -covermode=atomic ./...
    }
    echo "📊 Merging coverage reports..."
    command -v gocovmerge >/dev/null 2>&1 && gocovmerge coverage-*.out > coverage.out && rm coverage-*.out || echo "⚠️  gocovmerge not available"
    command -v go >/dev/null 2>&1 && go tool cover -html=coverage.out -o coverage.html && echo "📊 Coverage report: coverage.html"
    echo "✅ Coverage testing complete!"
}

# Module-specific testing commands
test-core: @workdir("core") { go test -v ./... }
test-runtime: @workdir("runtime") { go test -v ./... }
test-testing: @workdir("testing") { go test -v ./... }
test-cli: @workdir("cli") { go test -v ./... }

# Component-specific tests
test-lexer: @workdir("cli") { go test -v ./internal/lexer }
test-parser: @workdir("cli") { go test -v ./internal/parser }
test-engine: @workdir("cli") { go test -v ./internal/engine }
test-decorators: @parallel {
    @workdir("runtime") { go test -v ./decorators }
    @workdir("cli") { go test -v ./internal/builtins }
}

# =============================================================================
# 📝 CODE QUALITY
# =============================================================================

# Format all code across modules
format: {
    echo "📝 Formatting all code across modules..."
    @parallel {
        command -v gofumpt >/dev/null 2>&1 && gofumpt -w . || go fmt ./...
        command -v nixpkgs-fmt >/dev/null 2>&1 && find . -name '*.nix' -exec nixpkgs-fmt {} + || echo "⚠️  nixpkgs-fmt not available"
    }
    echo "✅ All code formatted!"
}

# Run linters across all modules
lint: {
    echo "🔍 Running linters across all modules..."
    if command -v golangci-lint >/dev/null 2>&1; then echo "Using golangci-lint"; else echo "⚠️  golangci-lint not available, using go vet"; fi
    @parallel {
        cd core && (command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=3m || go vet ./...)
        cd runtime && (command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=3m || go vet ./...)
        cd testing && (command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=3m || go vet ./...)
        cd cli && (command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=3m || go vet ./...)
    }
    echo "✅ Linting complete!"
}

# Clean build artifacts and caches
clean: {
    echo "🧹 Cleaning generated files and artifacts..."
    rm -f @var(PROJECT) coverage-core.out coverage-runtime.out coverage-testing.out coverage-cli.out coverage.out coverage.html
    rm -rf result result-* build/ artifacts/
    go clean -cache -modcache -testcache 2>/dev/null || echo "Go clean completed"
    echo "✅ Cleanup complete"
}

# =============================================================================
# 📦 NIX INTEGRATION  
# =============================================================================

# Build with Nix
nix-build: {
    echo "📦 Building with Nix..."
    nix build .#@var(PROJECT) --print-build-logs
    echo "✅ Nix build complete"
}

# Comprehensive Nix validation
nix-check: {
    echo "🔍 Running comprehensive Nix validation..."
    nix flake check --print-build-logs
    echo "✅ Nix validation passed"
}

# Test all example CLIs
test-examples: {
    echo "🎯 Testing example CLIs..."
    @parallel {
        nix build .#basicDev --print-build-logs
        nix build .#webDev --print-build-logs
        nix build .#goProject --print-build-logs
    }
    echo "Testing example functionality..."
    @parallel {
        nix run .#basicDev -- --help >/dev/null
        nix run .#webDev -- --help >/dev/null
        nix run .#goProject -- --help >/dev/null
    }
    echo "✅ Example CLI tests passed!"
}

# =============================================================================
# 🔄 DEVELOPMENT WORKFLOWS
# =============================================================================

# Fast development iteration
dev-flow: {
    echo "🔄 Running development workflow..."
    dev test-quick
    dev test
    dev build
    echo "✅ Development workflow complete!"
}

# Full CI workflow (mirrors GitHub Actions)
ci: {
    echo "🔄 Running CI workflow..."
    echo "Stage 1: Quick Checks..."
    dev test-quick
    echo "Stage 2: Full Testing..."
    dev test-coverage
    echo "Stage 3: Build Verification..."
    dev build
    echo "Stage 4: Nix Validation..."
    dev nix-check
    echo "🎉 CI workflow complete!"
}

# Release preparation with comprehensive testing
release: @timeout(10m) {
    echo "📦 Running release preparation workflow..."
    dev clean
    dev setup
    dev ci
    dev test-examples
    dev format
    echo "📋 Release checklist complete!"
    echo "🚀 Ready for release!"
}

# =============================================================================
# 📊 PROJECT STATUS & UTILITIES
# =============================================================================

# Show detailed project information
info: {
    echo "📊 @var(PROJECT) Multi-Module Project Status"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Project: @var(PROJECT)"
    echo "Version: @var(VERSION)"
    echo "Build time: @var(BUILD_TIME)"
    echo "Go version: @var(GO_VERSION)"
    echo ""
    echo "Module Structure:"
    echo "  core/     - AST, types, errors, and plan system"
    echo "  runtime/  - Decorator implementations and execution context"
    echo "  testing/  - Testing utilities and harnesses"
    echo "  cli/      - Main CLI application and internal packages"
    echo ""
    echo "Statistics:"
    echo "  Go source files: $(find . -name '*.go' | wc -l)"
    echo "  Test files: $(find . -name '*_test.go' | wc -l)"
    echo "  Modules: $(find . -name 'go.mod' | wc -l)"
    echo ""
    echo "Git status:"
    git status --porcelain | head -5 || echo "Not a git repository"
}

# Quick alias for info
status: dev info

# =============================================================================
# 📋 HELP & DOCUMENTATION
# =============================================================================

# Show comprehensive help
help: {
    echo "🔧 Devcmd Multi-Module Development Commands"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "🚀 Core Development:"
    echo "  setup          - Set up development environment"
    echo "  build          - Build the CLI binary"
    echo "  clean          - Clean artifacts and caches"
    echo ""
    echo "🧪 Testing (ordered by speed):"
    echo "  test-quick     - Fast checks and linting"
    echo "  test           - Run all module tests"
    echo "  test-coverage  - Tests with coverage reports"
    echo "  test-core      - Test core module only"
    echo "  test-runtime   - Test runtime module only"
    echo "  test-testing   - Test testing module only"
    echo "  test-cli       - Test CLI module only"
    echo ""
    echo "📝 Code Quality:"
    echo "  format         - Format all code"
    echo "  lint           - Run all linters"
    echo ""
    echo "📦 Nix Integration:"
    echo "  nix-build      - Build with Nix"
    echo "  nix-check      - Comprehensive Nix validation"
    echo "  test-examples  - Test example CLIs"
    echo ""
    echo "🔄 Workflows:"
    echo "  dev-flow       - Fast development iteration"
    echo "  ci             - Full CI workflow"
    echo "  release        - Release preparation"
    echo ""
    echo "📊 Utilities:"
    echo "  info           - Show project status"
    echo "  status         - Show project status (alias)"
    echo "  help           - Show this help"
    echo ""
    echo "Multi-module structure: core, runtime, testing, cli"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}