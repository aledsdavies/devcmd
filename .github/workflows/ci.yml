name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch: # Allow manual triggers

env:
  GO_VERSION: '1.24.3'
  CACHE_VERSION: v2  # Updated for custom lexer (no ANTLR)

jobs:
  # =============================================================================
  # 🔍 FORMATTING CHECKS - Nix & Go Formatting (30s)
  # =============================================================================
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Check Nix formatting
        run: |
          echo "🔍 Checking Nix file formatting..."
          nix run nixpkgs#nixpkgs-fmt -- --check . || {
            echo "❌ Nix formatting check failed. Run 'dev format' to fix."
            exit 1
          }

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install gofumpt
        run: go install mvdan.cc/gofumpt@latest

      - name: Check Go formatting
        run: |
          echo "🔍 Checking Go formatting..."
          if [ "$(gofumpt -l . | wc -l)" -gt 0 ]; then
            echo "❌ Go formatting issues found:"
            gofumpt -l .
            echo "Run 'dev format' to fix."
            exit 1
          fi

      - name: Nix flake check (basic)
        run: |
          echo "🔍 Basic Nix flake validation..."
          nix flake check --no-build

  # =============================================================================
  # 🔍 MODULE LINTING - Using dev commands (30s each)
  # =============================================================================
  module-lint:
    name: Lint (${{ matrix.module }})
    runs-on: ubuntu-latest
    needs: [format-check]
    strategy:
      matrix:
        module: [core, runtime, testing, cli]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Run module linting
        run: |
          echo "🔍 Running linters for ${{ matrix.module }} module using dev commands..."
          nix develop -c dev ${{ matrix.module }}-lint

  # =============================================================================
  # 🧪 MODULE TESTING - Respecting Dependency Hierarchy
  # =============================================================================
  
  # Core module (foundation - no dependencies)
  test-core:
    name: Test Core Module
    runs-on: ubuntu-latest
    needs: [format-check, module-lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Run core module CI
        run: |
          echo "🧪 Running core module CI workflow..."
          nix develop -c dev core-ci

      - name: Upload core coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-core
          path: coverage-core.out

  # Runtime module (depends on core)
  test-runtime:
    name: Test Runtime Module  
    runs-on: ubuntu-latest
    needs: [test-core]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Run runtime module CI
        run: |
          echo "⚡ Running runtime module CI workflow..."
          nix develop -c dev runtime-ci

      - name: Upload runtime coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-runtime
          path: coverage-runtime.out

  # Testing module (depends on core + runtime)
  test-testing:
    name: Test Testing Module
    runs-on: ubuntu-latest
    needs: [test-core, test-runtime]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Run testing module CI
        run: |
          echo "🧰 Running testing module CI workflow..."
          nix develop -c dev testing-ci

      - name: Upload testing coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-testing
          path: coverage-testing.out

  # CLI module (depends on all modules)  
  test-cli:
    name: Test CLI Module
    runs-on: ubuntu-latest
    needs: [test-core, test-runtime, test-testing]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Run CLI module CI
        run: |
          echo "🚀 Running CLI module CI workflow..."
          nix develop -c dev cli-ci

      - name: Upload CLI coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-cli
          path: coverage-cli.out

  # Aggregate coverage reports
  aggregate-coverage:
    name: Aggregate Coverage
    runs-on: ubuntu-latest
    needs: [test-core, test-runtime, test-testing, test-cli]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts/

      - name: Merge coverage reports using dev commands
        run: |
          echo "📊 Copying coverage files and merging..."
          find coverage-artifacts/ -name "*.out" -exec cp {} . \;
          nix develop -c dev coverage-reports

      - name: Upload merged coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Archive merged coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-merged
          path: |
            coverage.out
            coverage.html

  # =============================================================================
  # 🔨 BUILD BINARIES - Core Deliverables (1-2m)
  # =============================================================================
  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: [format-check]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          echo "🔨 Building devcmd for ${{ matrix.goos }}/${{ matrix.goarch }}..."
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          go build -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME}" \
            -o devcmd-${{ matrix.goos }}-${{ matrix.goarch }} \
            ./cli/main.go

      - name: Test binary
        run: |
          echo "🧪 Testing built binary..."
          ./devcmd-${{ matrix.goos }}-${{ matrix.goarch }} --version || echo "Version command not available"
          ./devcmd-${{ matrix.goos }}-${{ matrix.goarch }} --help

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: devcmd-${{ matrix.goos }}-${{ matrix.goarch }}
          path: devcmd-${{ matrix.goos }}-${{ matrix.goarch }}

  # =============================================================================
  # 📦 NIX PACKAGES - Core Nix Integration (2-4m)
  # =============================================================================
  nix-core:
    name: Nix Core Packages
    runs-on: ${{ matrix.os }}
    needs: [format-check]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Build core devcmd package
        run: |
          echo "📦 Building core devcmd package..."
          nix build .#devcmd --print-build-logs

      - name: Test core package
        run: |
          echo "🧪 Testing core devcmd package..."
          ./result/bin/devcmd --help
          ./result/bin/devcmd --version || echo "Version command not available"

      - name: Build development shell
        run: |
          echo "🐚 Testing development shell..."
          nix develop --command echo "✅ Development shell works!"

      - name: Comprehensive Nix flake check
        run: |
          echo "🔍 Running comprehensive Nix flake check..."
          nix flake check --print-build-logs



  # =============================================================================
  # 📋 SUMMARY - Collect Results
  # =============================================================================
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [format-check, module-lint, test-core, test-runtime, test-testing, test-cli, aggregate-coverage, build-binaries, nix-core]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "📋 CI Pipeline Summary"
          echo "════════════════════════════════════════"

          jobs=(
            "${{ needs.format-check.result }}:Format Check"
            "${{ needs.module-lint.result }}:Module Lint"
            "${{ needs.test-core.result }}:Test Core"
            "${{ needs.test-runtime.result }}:Test Runtime"
            "${{ needs.test-testing.result }}:Test Testing"
            "${{ needs.test-cli.result }}:Test CLI"
            "${{ needs.aggregate-coverage.result }}:Coverage Report"
            "${{ needs.build-binaries.result }}:Build Binaries"
            "${{ needs.nix-core.result }}:Nix Core"
          )

          all_passed=true
          for job in "${jobs[@]}"; do
            status="${job%%:*}"
            name="${job##*:}"
            case $status in
              success) echo "✅ $name" ;;
              failure) echo "❌ $name"; all_passed=false ;;
              cancelled) echo "⏹️  $name"; all_passed=false ;;
              skipped) echo "⏭️  $name" ;;
              *) echo "❓ $name ($status)"; all_passed=false ;;
            esac
          done

          echo "════════════════════════════════════════"
          if [ "$all_passed" = true ]; then
            echo "🎉 All CI jobs passed successfully!"
          else
            echo "❌ Some CI jobs failed. Check the logs above."
            exit 1
          fi

  # =============================================================================
  # 📦 LATEST BUILDS (only on main/master - for development artifacts)
  # =============================================================================
  latest-builds:
    name: Latest Development Builds
    runs-on: ubuntu-latest
    needs: [summary]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare development builds
        run: |
          echo "📦 Preparing latest development builds..."
          mkdir -p latest/

          # Copy binaries with dev suffix
          find artifacts/ -name 'devcmd-*' -type f -exec cp {} latest/ \;


          # Create build info
          echo "Built from commit: ${{ github.sha }}" > latest/build-info.txt
          echo "Built at: $(date -u)" >> latest/build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> latest/build-info.txt

      - name: Archive latest builds
        uses: actions/upload-artifact@v4
        with:
          name: latest-dev-builds
          path: latest/
          retention-days: 30  # Keep for 30 days

# =============================================================================
# 🚀 RELEASE (only when tags are pushed)
# =============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    # Note: This runs independently when tags are pushed, doesn't need summary
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build release binaries
        run: |
          echo "🔨 Building release binaries for ${{ steps.version.outputs.version }}..."

          # Build for multiple platforms
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )

          mkdir -p release/

          for platform in "${platforms[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}

            echo "Building for $GOOS/$GOARCH..."

            if [ "$GOOS" = "windows" ]; then
              BINARY_NAME="devcmd-$GOOS-$GOARCH.exe"
            else
              BINARY_NAME="devcmd-$GOOS-$GOARCH"
            fi

            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
              -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -o "release/$BINARY_NAME" \
              ./cli/main.go
          done


      - name: Create checksums
        run: |
          echo "🔐 Creating checksums..."
          cd release/

          # Create checksums for binaries
          for file in devcmd-*; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.txt
            fi
          done


      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            release/devcmd-*
            release/checksums.txt
          generate_release_notes: true
          body: |
            ## 🚀 Devcmd ${{ steps.version.outputs.version }}

            **Declarative CLI Generation Tool**

            ### 📦 Downloads
            - **Linux (x64)**: `devcmd-linux-amd64`
            - **Linux (ARM64)**: `devcmd-linux-arm64`
            - **macOS (Intel)**: `devcmd-darwin-amd64`
            - **macOS (Apple Silicon)**: `devcmd-darwin-arm64`
            - **Windows (x64)**: `devcmd-windows-amd64.exe`


            ### ✅ Verification
            Verify downloads with SHA256 checksums in `checksums.txt`.

            ### 📚 Documentation
            See README.md for usage instructions and examples.
