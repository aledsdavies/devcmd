name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch: # Allow manual triggers

env:
  GO_VERSION: '1.24'
  CACHE_VERSION: v1

jobs:
  # =============================================================================
  # üîç FAST CHECKS - Formatting & Linting (30s)
  # =============================================================================
  format-lint:
    name: Format & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Check Nix formatting
        run: |
          echo "üîç Checking Nix file formatting..."
          nix run nixpkgs#nixpkgs-fmt -- --check . || {
            echo "‚ùå Nix formatting check failed. Run 'just format' to fix."
            exit 1
          }

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Go tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install mvdan.cc/gofumpt@latest

      - name: Check Go formatting
        run: |
          echo "üîç Checking Go formatting..."
          if [ "$(gofumpt -l . | wc -l)" -gt 0 ]; then
            echo "‚ùå Go formatting issues found:"
            gofumpt -l .
            echo "Run 'just format' to fix."
            exit 1
          fi

      - name: Go linting
        run: |
          echo "üîç Running Go linters..."
          golangci-lint run --timeout=5m

      - name: Nix flake check (basic)
        run: |
          echo "üîç Basic Nix flake validation..."
          nix flake check --no-build

  # =============================================================================
  # ‚ö° GO UNIT TESTS - Core Logic (1-2m)
  # =============================================================================
  go-tests:
    name: Go Tests
    runs-on: ubuntu-latest
    needs: [format-lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Java (for ANTLR)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install ANTLR
        run: |
          wget -q https://www.antlr.org/download/antlr-4.13.1-complete.jar -O /tmp/antlr.jar
          echo 'export CLASSPATH="/tmp/antlr.jar:$CLASSPATH"' >> $GITHUB_ENV

      - name: Generate ANTLR Parser
        run: |
          echo "üìù Generating ANTLR parser..."
          rm -rf internal/gen
          mkdir -p internal/gen
          cd grammar && java -jar /tmp/antlr.jar -Dlanguage=Go -package gen -listener -visitor -o ../internal/gen DevcmdLexer.g4 DevcmdParser.g4

      - name: Download Go dependencies
        run: |
          go mod download
          go mod verify

      - name: Run Go tests with coverage
        run: |
          echo "üß™ Running Go tests with coverage..."
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # =============================================================================
  # üî® BUILD BINARIES - Core Deliverables (2-3m)
  # =============================================================================
  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: [go-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Java (for ANTLR)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Generate ANTLR Parser
        run: |
          wget -q https://www.antlr.org/download/antlr-4.13.1-complete.jar -O /tmp/antlr.jar
          rm -rf internal/gen
          mkdir -p internal/gen
          cd grammar && java -jar /tmp/antlr.jar -Dlanguage=Go -package gen -listener -visitor -o ../internal/gen DevcmdLexer.g4 DevcmdParser.g4

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          echo "üî® Building devcmd for ${{ matrix.goos }}/${{ matrix.goarch }}..."
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          go build -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME}" \
            -o devcmd-${{ matrix.goos }}-${{ matrix.goarch }} \
            ./cmd/devcmd

      - name: Test binary
        run: |
          echo "üß™ Testing built binary..."
          ./devcmd-${{ matrix.goos }}-${{ matrix.goarch }} --version || echo "Version command not available"
          ./devcmd-${{ matrix.goos }}-${{ matrix.goarch }} --help

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: devcmd-${{ matrix.goos }}-${{ matrix.goarch }}
          path: devcmd-${{ matrix.goos }}-${{ matrix.goarch }}

  # =============================================================================
  # üì¶ NIX PACKAGES - Core Nix Integration (3-5m)
  # =============================================================================
  nix-core:
    name: Nix Core Packages
    runs-on: ${{ matrix.os }}
    needs: [go-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Build core devcmd package
        run: |
          echo "üì¶ Building core devcmd package..."
          nix build .#devcmd --print-build-logs

      - name: Test core package
        run: |
          echo "üß™ Testing core devcmd package..."
          ./result/bin/devcmd --help
          ./result/bin/devcmd --version || echo "Version command not available"

      - name: Build development shell
        run: |
          echo "üêö Testing development shell..."
          nix develop --command echo "‚úÖ Development shell works!"

      - name: Comprehensive Nix flake check
        run: |
          echo "üîç Running comprehensive Nix flake check..."
          nix flake check --print-build-logs

  # =============================================================================
  # üß™ NIX TESTS - Generated CLI Testing (5-8m)
  # =============================================================================
  nix-tests:
    name: Nix Tests
    runs-on: ubuntu-latest
    needs: [nix-core]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Run Nix test suite
        run: |
          echo "üß™ Running Nix-based tests..."
          nix build .#tests --print-build-logs
          echo "‚úÖ Core test suite passed"

      - name: Run example tests
        run: |
          echo "üß™ Running example CLI tests..."
          nix build .#test-examples --print-build-logs || echo "‚ö†Ô∏è  Example tests not available"

      - name: Test individual components (continue on failure)
        run: |
          echo "üß™ Testing individual components..."

          # Test each component individually, don't fail the whole job
          components=(
            "test-basic:Basic functionality"
            "test-posix:POSIX syntax"
            "test-variables:Variable expansion"
            "test-processes:Process management"
            "test-blocks:Block commands"
            "test-errors:Error handling"
            "test-performance:Performance"
            "test-webdev:Web development"
            "test-go:Go project"
          )

          for component in "${components[@]}"; do
            name="${component%%:*}"
            desc="${component##*:}"
            echo "Testing $desc..."
            if nix build .#${name} --print-build-logs 2>/dev/null; then
              echo "‚úÖ $desc tests passed"
            else
              echo "‚ö†Ô∏è  $desc tests not available or failed"
            fi
          done

  # =============================================================================
  # üéØ EXAMPLE CLIS - Real-world Usage Examples (8-12m)
  # =============================================================================
  nix-examples:
    name: Example CLIs
    runs-on: ubuntu-latest
    needs: [nix-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Build all example CLIs
        run: |
          echo "üéØ Building all example CLIs..."

          examples=(
            "basicDev:Basic development CLI"
            "webDev:Web development CLI"
            "goProject:Go project CLI"
            "rustProject:Rust project CLI"
            "dataScienceProject:Data science CLI"
            "devOpsProject:DevOps CLI"
          )

          for example in "${examples[@]}"; do
            name="${example%%:*}"
            desc="${example##*:}"
            echo "Building $desc..."
            if nix build .#${name} --print-build-logs; then
              echo "‚úÖ $desc built successfully"
              # Test the CLI
              echo "üß™ Testing $desc..."
              ./result/bin/* --help || echo "‚ö†Ô∏è  Help command not available"
            else
              echo "‚ùå Failed to build $desc"
              exit 1
            fi
          done

      - name: Interactive example testing
        run: |
          echo "üéØ Running interactive example tests..."

          # Test each example's basic functionality
          examples=(basicDev webDev goProject rustProject dataScienceProject devOpsProject)

          for example in "${examples[@]}"; do
            echo "Testing $example..."
            if nix run .#${example} -- --help >/dev/null 2>&1; then
              echo "‚úÖ $example CLI works"
            else
              echo "‚ö†Ô∏è  $example CLI has issues"
            fi
          done

      - name: Upload example binaries
        run: |
          echo "üì¶ Collecting example binaries..."
          mkdir -p example-binaries

          examples=(basicDev webDev goProject rustProject dataScienceProject devOpsProject)
          for example in "${examples[@]}"; do
            if nix build .#${example} --print-build-logs; then
              cp -L result/bin/* example-binaries/${example} || echo "Could not copy ${example}"
            fi
          done

      - name: Archive example binaries
        uses: actions/upload-artifact@v4
        with:
          name: example-clis
          path: example-binaries/

  # =============================================================================
  # üìã SUMMARY - Collect Results
  # =============================================================================
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [format-lint, go-tests, build-binaries, nix-core, nix-tests, nix-examples]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "üìã CI Pipeline Summary"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

          jobs=(
            "${{ needs.format-lint.result }}:Format & Lint"
            "${{ needs.go-tests.result }}:Go Tests"
            "${{ needs.build-binaries.result }}:Build Binaries"
            "${{ needs.nix-core.result }}:Nix Core"
            "${{ needs.nix-tests.result }}:Nix Tests"
            "${{ needs.nix-examples.result }}:Example CLIs"
          )

          all_passed=true
          for job in "${jobs[@]}"; do
            status="${job%%:*}"
            name="${job##*:}"
            case $status in
              success) echo "‚úÖ $name" ;;
              failure) echo "‚ùå $name"; all_passed=false ;;
              cancelled) echo "‚èπÔ∏è  $name"; all_passed=false ;;
              skipped) echo "‚è≠Ô∏è  $name" ;;
              *) echo "‚ùì $name ($status)"; all_passed=false ;;
            esac
          done

          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          if [ "$all_passed" = true ]; then
            echo "üéâ All CI jobs passed successfully!"
          else
            echo "‚ùå Some CI jobs failed. Check the logs above."
            exit 1
          fi

  # =============================================================================
  # üì¶ LATEST BUILDS (only on main/master - for development artifacts)
  # =============================================================================
  latest-builds:
    name: Latest Development Builds
    runs-on: ubuntu-latest
    needs: [summary]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare development builds
        run: |
          echo "üì¶ Preparing latest development builds..."
          mkdir -p latest/

          # Copy binaries with dev suffix
          find artifacts/ -name 'devcmd-*' -type f -exec cp {} latest/ \;

          # Copy example CLIs
          if [ -d artifacts/example-clis ]; then
            cp -r artifacts/example-clis latest/
          fi

          # Create build info
          echo "Built from commit: ${{ github.sha }}" > latest/build-info.txt
          echo "Built at: $(date -u)" >> latest/build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> latest/build-info.txt

      - name: Archive latest builds
        uses: actions/upload-artifact@v4
        with:
          name: latest-dev-builds
          path: latest/
          retention-days: 30  # Keep for 30 days

# =============================================================================
# üöÄ RELEASE (only when tags are pushed)
# =============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    # Note: This runs independently when tags are pushed, doesn't need summary
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v8
        with:
          logger: pretty

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Java (for ANTLR)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Generate ANTLR Parser
        run: |
          wget -q https://www.antlr.org/download/antlr-4.13.1-complete.jar -O /tmp/antlr.jar
          rm -rf internal/gen
          mkdir -p internal/gen
          cd grammar && java -jar /tmp/antlr.jar -Dlanguage=Go -package gen -listener -visitor -o ../internal/gen DevcmdLexer.g4 DevcmdParser.g4

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build release binaries
        run: |
          echo "üî® Building release binaries for ${{ steps.version.outputs.version }}..."

          # Build for multiple platforms
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )

          mkdir -p release/

          for platform in "${platforms[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}

            echo "Building for $GOOS/$GOARCH..."

            if [ "$GOOS" = "windows" ]; then
              BINARY_NAME="devcmd-$GOOS-$GOARCH.exe"
            else
              BINARY_NAME="devcmd-$GOOS-$GOARCH"
            fi

            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
              -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -o "release/$BINARY_NAME" \
              ./cmd/devcmd
          done

      - name: Build example CLIs
        run: |
          echo "üéØ Building example CLIs for release..."
          mkdir -p release/examples/

          examples=(basicDev webDev goProject rustProject dataScienceProject devOpsProject)
          for example in "${examples[@]}"; do
            echo "Building $example..."
            nix build .#${example} --print-build-logs
            cp -L result/bin/* "release/examples/${example}" || echo "Could not copy ${example}"
          done

      - name: Create checksums
        run: |
          echo "üîê Creating checksums..."
          cd release/

          # Create checksums for binaries
          for file in devcmd-*; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.txt
            fi
          done

          # Create checksums for examples
          for file in examples/*; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.txt
            fi
          done

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            release/devcmd-*
            release/examples/*
            release/checksums.txt
          generate_release_notes: true
          body: |
            ## üöÄ Devcmd ${{ steps.version.outputs.version }}

            **Declarative CLI Generation Tool**

            ### üì¶ Downloads
            - **Linux (x64)**: `devcmd-linux-amd64`
            - **Linux (ARM64)**: `devcmd-linux-arm64`
            - **macOS (Intel)**: `devcmd-darwin-amd64`
            - **macOS (Apple Silicon)**: `devcmd-darwin-arm64`
            - **Windows (x64)**: `devcmd-windows-amd64.exe`

            ### üéØ Example CLIs
            Pre-built example CLIs are included in the `examples/` directory.

            ### ‚úÖ Verification
            Verify downloads with SHA256 checksums in `checksums.txt`.

            ### üìö Documentation
            See README.md for usage instructions and examples.
